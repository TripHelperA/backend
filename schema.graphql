type User {
  userId: ID!
  firstName: String!
  familyName: String!
  routeIds: [ID!]!
}

input UserInput {
  firstName: String!
  familyName: String!
}

input mainLogicUserInput {
  startingPlace: String!
  endPlace: String!
  userInput: String!
}
type Route {
  routeId: ID!
  userId: ID!
  title: String!
  description: String
  sharable: Boolean!
  locations: [String!]!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

input RouteInput {
  title: String!
  description: String
  sharable: Boolean!
  locations: [String!]!
}

type Query {
  getUser(userId: ID!): User
  getRoute(routeId: ID!): Route
  getUserRoutes(userId: ID!): [Route]
}

type Mutation {
  createUser(input: UserInput!): User
  updateUser(userId: ID!, input: UserInput!): User
  createRoute(input: RouteInput!): Route
  updateRoute(routeId: ID!, input: RouteInput!): Route
  deleteRoute(routeId: ID!): Route
  mainLogicRequest(input: mainLogicUserInput!): [String!]!
}

schema {
  query: Query
  mutation: Mutation
}
