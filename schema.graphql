type SignedUrl {
  url: String!
  key: String!
}
type User {
  userId: ID!
  firstName: String
  familyName: String
  routeIds: [ID]
  userMetrics: [Int]
}

type Route {
  routeId: ID!
  userId: ID!
  title: String!
  description: String
  sharable: String!
  locations: [Location!]!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Location {
  latitude: Float!
  longitude: Float!
  placeId: String!
  isOnTheRoute: Boolean!
}
type Review {
  authorName: String!
  profilePhotoUrl: String
  rating: Float
  text: String!
  time: AWSDateTime
  relativeTime: String
}
type PlaceInfo {
  title: String!
  latitude: Float!
  longitude: Float!
  rating: Float!
  description: String
  reviews: [Review]
  photoURL: String
}
input Coordinate {
  latitude: Float!
  longitude: Float!
}
input UserInput {
  firstName: String!
  familyName: String!
}

input LocationInput {
  placeId: String!
  isOnTheRoute: Boolean!
}

input mainLogicUserInput {
  startingPlace: Coordinate!
  endPlace: Coordinate!
  userInput: String!
  stopCount: Int!
}

input RouteInput {
  title: String!
  description: String
  sharable: String!
  locations: [LocationInput!]!
}

type Query {
  getUser(userId: ID!): User
  getRoute(routeId: ID!): Route
  getUserRoutes(userId: ID!): [Route]
  getPlaceInfo(input: String!): PlaceInfo
  getPlaceID(input: Coordinate!): String!
  getAllRoutes: [Route]
  mainLogicRequest(input: mainLogicUserInput!): [Location!]!
}

type Mutation {
  createUser(input: UserInput!): User
  updateUser(userId: ID!, input: UserInput!): User
  updateUserMetrics(metrics: [Int!]!): [Int!]!
  createRoute(input: RouteInput!): Route
  updateRoute(routeId: ID!, input: RouteInput!): Route
  deleteRoute(routeId: ID!): Route
  generateSignedUrl(type: String!, id: ID!, mode: String!): SignedUrl!
}

schema {
  query: Query
  mutation: Mutation
}
